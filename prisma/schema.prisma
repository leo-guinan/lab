// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String           @id @default(cuid())
  createdAt          DateTime         @default(now())
  email              String           @unique
  emailVerified      DateTime?
  name               String?
  stripeCustomerId   String?
  role               String           @default("user")
  onboardingChatUUID String?
  instantAccessUntil DateTime?
  thoughts           Thought[]
  communities        Community[]
  memberships        Membership[]
  image              String?
  accounts           Account[]
  sessions           Session[]
  contexts           Context[]
  tasks              Task[]
  intents            Intent[]
  subscriptions      Subscription[]
  googleCalendars    GoogleCalendar[] // Relation to Google Calendar accounts
  acceptedPolicy     DateTime?
  subminds           Submind[]
  questions          Question[]
  preloSubmind       PreloSubmind?    @relation(fields: [preloSubmindId], references: [id])
  preloSubmindId     Int?
}

model Subscription {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  active               Boolean  @default(true)
  stripeSubscriptionId String?
  user                 User     @relation(fields: [userId], references: [id])
  userId               String
  price                Price    @relation(fields: [priceId], references: [id])
  priceId              Int
  validUntil           DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          Int          @id @default(autoincrement())
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   String
  memberships Membership[]
  name        String?
}

model Membership {
  id          Int       @id @default(autoincrement())
  member      User      @relation(fields: [memberId], references: [id])
  memberId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
}

model Context {
  id            Int             @id @default(autoincrement())
  name          String
  details       String?
  thoughts      Thought[]
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       String
  path          String?
  ToolToContext ToolToContext[]
  tasks         Task[]
  goal          String?
  subminds      Submind[]
  questions     Question[]

  @@unique([ownerId, name])
}

model Thought {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  content         String
  owner           User       @relation(fields: [ownerId], references: [id])
  ownerId         String
  context         Context    @relation(fields: [contextId], references: [id])
  contextId       Int
  intents         Intent[]
  uuid            String?
  chatSessionId   String?
  children        Thought[]  @relation("ParentThoughts")
  parent          Thought?   @relation("ParentThoughts", fields: [parentId], references: [id])
  parentId        Int?
  submind         Submind?   @relation(name: "SubmindInternalThoughts", fields: [submindId], references: [id])
  submindId       Int?
  relatedSubminds Submind[]  @relation(name: "SubmindRelatedThoughts")
  pendingSubminds Submind[]  @relation(name: "SubmindPendingThoughts")
  likes           Like[]
  research        Research[]
  tasks           Task[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  thought   Thought  @relation(fields: [thoughtId], references: [id])
  thoughtId Int
  submind   Submind  @relation(fields: [submindId], references: [id])
  submindId Int
}

model Tool {
  id            Int             @id @default(autoincrement())
  url           String
  name          String
  description   String?
  pattern       String?
  slug          String
  ToolToContext ToolToContext[]
  triggers      Trigger[]
  defaultTool   DefaultTool?
  defaultToolId Int?

  @@unique([url, slug])
}

model ToolToContext {
  id        Int     @id @default(autoincrement())
  tool      Tool    @relation(fields: [toolId], references: [id])
  toolId    Int
  context   Context @relation(fields: [contextId], references: [id])
  contextId Int
}

enum Trigger {
  SCHEDULED
  ACTION
  EVENT
  THOUGHT
}

enum SubmindStatus {
  ACTIVE
  READY
  COMPLETED
}

model Task {
  id           Int              @id @default(autoincrement())
  name         String
  description  String?
  owner        User             @relation(fields: [ownerId], references: [id])
  ownerId      String
  uuid         String           @unique
  submind      Submind?         @relation(fields: [submindId], references: [id])
  submindId    Int?
  thought      Thought?         @relation(fields: [thoughtId], references: [id])
  thoughtId    Int?
  dependencies TaskDependency[] @relation("dependsOn")
  dependantOn  TaskDependency[] @relation("dependentOn")
  contexts     Context[]
  submindTasks SubmindTask[]
}

model TaskDependency {
  dependent   Task @relation("dependentOn", fields: [dependentId], references: [id])
  dependentId Int
  dependsOn   Task @relation("dependsOn", fields: [dependsOnId], references: [id])
  dependsOnId Int

  @@id([dependentId, dependsOnId])
}

model Intent {
  id           Int       @id @default(autoincrement())
  content      String
  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String
  thoughts     Thought[]
  createdAt    DateTime  @default(now())
  documentUUID String    @unique
}

model EntityId {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
}

model DefaultTool {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  tool      Tool     @relation(fields: [toolId], references: [id])
  toolId    Int      @unique
}

model GoogleCalendar {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  userId       String // Foreign key reference to the User model
  accessToken  String // Encrypted access token
  refreshToken String? // Encrypted refresh token, nullable because it might not always be provided
  tokenType    String
  expiryDate   DateTime // The timestamp when the access token expires
  user         User            @relation(fields: [userId], references: [id])
  events       CalendarEvent[]
  name         String?
  email        String?

  @@unique([userId, email])
  @@unique([userId, accessToken]) // Ensuring uniqueness for each user's access token
}

model CalendarEvent {
  id               Int             @id @default(autoincrement())
  googleCalendarId Int? // Foreign key reference to the GoogleCalendar model
  googleEventId    String // Unique ID of the event from Google Calendar
  summary          String?
  description      String?
  start            DateTime
  end              DateTime
  timeZone         String?
  location         String?
  status           String?
  googleCalendar   GoogleCalendar? @relation(fields: [googleCalendarId], references: [id], onDelete: SetNull)

  @@index([googleCalendarId]) // Index to improve query performance
}

model Price {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  active        Boolean        @default(true)
  amount        Int
  currency      String
  interval      String
  stripePriceId String?
  product       Product        @relation(fields: [productId], references: [id])
  productId     Int
  subscriptions Subscription[]
}

model Product {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  active          Boolean  @default(true)
  name            String
  description     String?
  stripeProductId String?
  prices          Price[]
}

enum SubmindSchedule {
  DAILY
  EIGHT_HOUR
  FOUR_HOUR
  INSTANT
}

model Submind {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String
  description     String?
  owner           User            @relation(fields: [ownerId], references: [id])
  ownerId         String
  thoughts        Thought[]       @relation("SubmindInternalThoughts")
  relatedThoughts Thought[]       @relation("SubmindRelatedThoughts")
  pendingThoughts Thought[]       @relation("SubmindPendingThoughts")
  context         Context         @relation(fields: [contextId], references: [id])
  webhookUrl      String?
  contextId       Int
  questions       Question[]
  documentUUID    String          @unique
  status          SubmindStatus   @default(READY)
  lastRun         DateTime?
  mindUUID        String?
  founderUUID     String?
  valuesUUID      String?
  answers         Answer[]
  likes           Like[]
  schedule        SubmindSchedule @default(DAILY)
  research        Research[]
  tasks           Task[]
  submindTasks    SubmindTask[]
}

model Question {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     String
  submind     Submind?   @relation(fields: [submindId], references: [id])
  submindId   Int?
  context     Context    @relation(fields: [contextId], references: [id])
  contextId   Int
  forHuman    Boolean    @default(false)
  forInternet Boolean    @default(false)
  answers     Answer[]
  research    Research[]
  error       String?
}

model Answer {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String?
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  source     String?
  requestId  String?
  submind    Submind?  @relation(fields: [submindId], references: [id])
  submindId  Int?
  research   Research? @relation(fields: [researchId], references: [id])
  researchId Int?
}

model Research {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String?
  submind     Submind    @relation(fields: [submindId], references: [id])
  submindId   Int
  respondTo   Thought    @relation(fields: [respondToId], references: [id])
  respondToId Int
  questions   Question[]
  answers     Answer[]
  response    String?
  completed   Boolean    @default(false)
}

model SubmindTask {
  id                   Int             @id @default(autoincrement())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  submind              Submind         @relation(fields: [submindId], references: [id])
  submindId            Int
  task                 Task            @relation(fields: [taskId], references: [id])
  taskId               Int
  canCurrentlyComplete Boolean         @default(false)
  metrics              SubmindMetric[]
}

model SubmindMetric {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  submindTask   SubmindTask @relation(fields: [submindTaskId], references: [id])
  submindTaskId Int
  metric        String
  value         String
  cadence       String
}

model ScheduledThought {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  baseThought String
  schedule    String
  time        DateTime
}

model PreloSubmind {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  users     User[]
  clients   PreloClient[]
  preloQuestions PreloQuestion[]
}

model PreloQuestion {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  content   String
  answer    PreloAnswer?
  answerId  Int?
  fastMode  Boolean      @default(false)
  submind   PreloSubmind @relation(fields: [submindId], references: [id])
  submindId Int
}

model PreloAnswer {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  content    String?
  requestId  Int
  question   PreloQuestion @relation(fields: [questionId], references: [id])
  questionId Int           @unique
}


model PreloClient {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  clientId  Int? //used to link backend model
  preloSubmind PreloSubmind @relation(fields: [preloSubmindId], references: [id])
  preloSubmindId Int

}