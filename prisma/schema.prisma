// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  name          String?
  thoughts      Thought[]
  communities   Community[]
  memberships   Membership[]
  image         String?
  accounts      Account[]
  sessions      Session[]
  contexts      Context[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          Int          @id @default(autoincrement())
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   String
  memberships Membership[]
  name        String?
}

model Membership {
  id          Int       @id @default(autoincrement())
  member      User      @relation(fields: [memberId], references: [id])
  memberId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
}

model Context {
  id       Int       @id @default(autoincrement())
  name     String
  thoughts Thought[]
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String

  @@unique([ownerId, name])


}

model Thought {
  id        Int     @id @default(autoincrement())
  content   String
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String
  context   Context @relation(fields: [contextId], references: [id])
  contextId Int
}
